{{define "Builder" -}}{{with $root := .}}{{with $target := ($root.Target.Name) -}}
// Generated by {{$root.GeneratedBy}} {{$root.SysArgs}}

package {{$root.PkgName}}

import (
	"fmt"
	"sync"
	"strings"
{{range $_, $im := $root.Imports}}
	{{if (not (eq $im.Name ""))}}{{$im.Name}} {{end}}{{$im.Path | printf "%q"}}
{{end -}}
)

type {{$target}}Builder interface {
	Get{{$target}}Metadata() *{{$target}}Metadata
{{range $_, $m := $root.InterfaceMethods}}
	{{$m}}
{{end}}
}

// Define{{$target}} names {{$target}} value.
func Define{{$target}}[T interface {
	{{$target}}Builder
	store{{$target}}(name string)
}](name string, t T) T {
	t.store{{$target}}(name)
	return t
}

type Builder struct {
	mu          	sync.Mutex
	named{{$target}}s  []{{$target}}Builder
	nameToIDMap map[string][]int
{{- range $_, $f := $root.Fields}}
	{{$f.Name}} {{$f.Type}}{{if (not (eq $f.Tag ""))}}  `{{$f.Tag}}`{{end}}
{{end}}
}

func New{{$target}}Builder({{if (not (eq $root.Constructor nil))}}{{range $_,$a := $root.Constructor.Args}}{{$a.Name | toLower}} {{if $a.Variadic}}...{{end}}{{$a.Type}},{{end}}{{end}}) *Builder {
	return &Builder{
		nameToIDMap: map[string][]int{},
		{{if (not (eq $root.Constructor nil))}}{{range $_,$a := $root.Constructor.Args}}{{$a.Name}}: {{$a.Name | toLower}}, {{end}}{{end}}
	}
}

// Each{{$target}} iterates named {{$target}}.
func (b *Builder) Each{{$target}}s(fn func({{$target}}Builder) error) error {
	for _, t := range b.named{{$target}}s {
		if err := fn(t); err != nil {
			return fmt.Errorf("error on %v -- %w", t, err) // TODO: use ToString()
		}
	}
	return nil
}

func (b *Builder) store{{$target}}(typ {{$target}}Builder) {
	val := typ.Get{{$target}}Metadata()
	val.id = -1
	if val.Name == "" {
		return
	}

	b.mu.Lock()
	defer b.mu.Unlock()
	id := len(b.named{{$target}}s)
	val.id = id
	b.named{{$target}}s = append(b.named{{$target}}s, typ)
	b.nameToIDMap[val.Name] = append(b.nameToIDMap[val.Name], id)
	// TODO: name conflict check
}

func (b *Builder) lookup{{$target}}(name string) {{$target}}Builder {
	b.mu.Lock()
	defer b.mu.Unlock()
	ids, ok := b.nameToIDMap[name]
	if !ok {
		b.nameToIDMap[name] = nil
		return nil
	}
	if len(ids) == 0 {
		return nil
	}

	// TODO: name conflict check
	return b.named{{$target}}s[ids[0]]
}

{{if $root.NeedReference}}
func (b *Builder) ReferenceByName(name string) *{{$target}}Ref {
	return &{{$target}}Ref{Name: name, rootbuilder: b}
}
func (b *Builder) Reference(typ {{$target}}Builder) *{{$target}}Ref {
	name := typ.Get{{$target}}Metadata().Name
	return &{{$target}}Ref{Name: name, rootbuilder: b, _{{$target}}: typ}
}

type {{$target}}Ref struct {
	Name string
	_{{$target}} {{$target}}Builder

	rootbuilder *Builder
}

func (t *{{$target}}Ref) get{{$target}}() {{$target}}Builder {
	if t._{{$target}} != nil {
		return t._{{$target}}
	}
	t._{{$target}} = t.rootbuilder.lookup{{$target}}(t.Name)
	return t._{{$target}}
}
func (t *{{$target}}Ref) Get{{$target}}Metadata() *{{$target}}Metadata {
	return t.get{{$target}}().Get{{$target}}Metadata()
}
{{end}}

{{range $_, $t := $root.Types}}{{with $name := ($t.Name)}}
{{if $t.NeedBuilder }}
// {{$name}} builds {{$target}} for {{$name}}
func (b *Builder) {{$name}}({{range $_, $tv := $t.TVars}}{{$tv.Name | toLower}} {{$tv.Type}}, {{end}}{{if (not (eq $t.Constructor nil))}}{{range $_,$a := $t.Constructor.Args}}{{$a.Name | toLower}} {{if $a.Variadic}}...{{end}}{{$a.Type}},{{end}}{{end}}) *{{$name}}{{if (lt 0 (len $t.TVars))}}[{{$t.TVars.Types}}]{{end}} {
	t := &{{$name}}{{if (lt 0 (len $t.TVars))}}[{{$t.TVars.Types}}]{{end}}{
		{{$name}}Builder: &{{$name}}Builder[{{$t.TVars.Types}}*{{$name}}{{if (lt 0 (len $t.TVars))}}[{{$t.TVars.Types}}]{{end}}]{
			_{{$target}}:    &_{{$target}}[*{{$name}}{{if (lt 0 (len $t.TVars))}}[{{$t.TVars.Types}}]{{end}}]{rootbuilder: b, metadata: &{{$target}}Metadata{Name: "", underlying: {{$t.Underlying | printf "%q"}}}},
			metadata: &{{$name}}Metadata{
				{{if (not (eq $t.Constructor nil))}}{{range $_,$a := $t.Constructor.Args}}{{$a.Name}}: {{if $a.Transform}}{{call $a.Transform (toLower $a.Name)}}{{else}}{{$a.Name | toLower}}{{end}}, {{end}}{{end}}
				{{range $_, $f := $t.Fields}}{{if (not (eq "" $f.Default))}}{{$f.Name}}: {{$f.Default}}, {{end}}{{end}}
			},
			{{range $_, $tv := $t.TVars}}{{$tv.Name | toLower}}: {{$tv.Name | toLower}}, {{end}}
		},
	}
	t.ret = t
	return t
}

type {{$name}}{{if (lt 0 (len $t.TVars))}}[{{$t.TVars.NameAndTypes}}]{{end}} struct {
	*{{$name}}Builder[{{$t.TVars.Names}}*{{$name}}{{if (lt 0 (len $t.TVars))}}[{{$t.TVars.Names}}]{{end}}]
}

func (t *{{$name}}{{if (lt 0 (len $t.TVars))}}[{{$t.TVars.Names}}]{{end}}) GetMetadata() *{{$name}}Metadata {
	return t.metadata
}

type {{$name}}Builder[{{$t.TVars.NameAndTypes}}R {{$target}}Builder] struct {
	*_{{$target}}[R]
	metadata *{{$name}}Metadata

{{- range $_, $tv := $t.TVars}}
	{{$tv.Name | toLower}} {{$tv.Name}}
{{end}}
}

{{if (lt 0 (len $t.Fields))}}
// begin setter of {{$name}} --------------------
{{range $_, $f := $t.Fields}}{{if (not (index $t.Used $f.Name))}}
// {{$f.Name}} set Metadata.{{$f.Name}}
func (b *{{$name}}Builder[{{$t.TVars.Names}}R]) {{$f.Name}}(value {{$f.Type}}) R {
	b.metadata.{{$f.Name}} = value
	return b.ret
}
{{end}}{{end}}
{{range $_, $s := $t.Setters}}{{with $a := $s.Arg}}
func (b *{{$name}}Builder[{{$t.TVars.Names}}R]) {{$s.Name}}({{$a.Name | toLower}} {{if $a.Variadic}}...{{end}}{{$a.Type}}) R {
	b.metadata.{{$s.Name}} = {{if $a.Transform}}{{call $a.Transform (toLower $a.Name)}}{{else}}{{$a.Name | toLower}}{{end}}
	return b.ret
}
{{end}}{{end}}
// end setter of {{$name}} --------------------
{{end -}}

{{else}}
{{end}}
{{end}}{{end -}}

// internal {{$target}}

type _{{$target}}[R {{$target}}Builder] struct {
	metadata *{{$target}}Metadata
	ret      R

	rootbuilder *Builder
}

func (t *_{{$target}}[R]) Get{{$target}}Metadata() *{{$target}}Metadata {
	return t.metadata
}

{{if (lt 0 (len $root.Target.Fields))}}
// begin setter of {{$target}} --------------------
{{range $_, $f := $root.Target.Fields}}
// {{$f.Name}} set Metadata.{{$f.Name}}
func (t _{{$target}}[R]) {{$f.Name}}(value {{$f.Type}}) R {
	t.metadata.{{$f.Name}} = value
	return t.ret
}
{{end}}
// end setter of {{$target}} --------------------
{{end -}}

func (t *_{{$target}}[R]) store{{$target}}(name string) {
	t.metadata.Name = name
	t.rootbuilder.store{{$target}}(t.ret)
}
{{if $root.Footer}}

// footer. ----
{{$root.Footer}}
{{end}}
{{end}}{{end}}{{end -}}

----------------------------------------

{{define "Metadata" -}}{{with $root := .}}{{with $target := ($root.Target.Name) -}}
// Generated by {{$root.GeneratedBy}} {{$root.SysArgs}}

package {{$root.PkgName}}

type {{$target}}Metadata struct {
	id         int    // required by reference
	Name       string `json:"-"` // required by reference (and toString)
	underlying string `json:"-"` // required by toString
{{ range $_, $f := $root.Target.Fields}}
	{{$f.Name}} {{$f.Type}}{{if (not (eq $f.Tag ""))}}  `{{$f.Tag}}`{{end}}
{{end}}
}

{{range $_, $t := $root.Types}}{{with $name := ($t.Name)}}
{{if $t.NeedBuilder }}
type {{$name}}Metadata struct {
{{- range $_, $f := $t.Fields}}
	{{$f.Name}} {{$f.Type}}{{if (not (eq $f.Tag ""))}}  `{{$f.Tag}}`{{end}}
{{end}}
}
{{else}}
type {{$name}} struct {
{{- range $_, $f := $t.Fields}}
	{{$f.Name}} {{$f.Type}}{{if (not (eq $f.Tag ""))}}  `{{$f.Tag}}`{{end}}
{{end}}
}
{{end}}
{{end}}{{end}}
{{end}}{{end}}{{end -}}
