// Generated by github.com/podhmo/gos/seed [-all -write]

package M

import (
	"fmt"
	"sync"
	"strings"
)

type TypeBuilder interface {
	GetTypeMetadata() *TypeMetadata

}

// DefineType names Type value.
func DefineType[T interface {
	TypeBuilder
	storeType(name string)
}](name string, t T) T {
	t.storeType(name)
	return t
}

type Builder struct {
	mu          	sync.Mutex
	namedTypes  []TypeBuilder
	nameToIDMap map[string][]int
}

func NewTypeBuilder() *Builder {
	return &Builder{
		nameToIDMap: map[string][]int{},
		
	}
}

// EachType iterates named Type.
func (b *Builder) EachTypes(fn func(TypeBuilder) error) error {
	for _, t := range b.namedTypes {
		if err := fn(t); err != nil {
			return fmt.Errorf("error on %v -- %w", t, err) // TODO: use ToString()
		}
	}
	return nil
}

func (b *Builder) storeType(typ TypeBuilder) {
	val := typ.GetTypeMetadata()
	val.id = -1
	if val.Name == "" {
		return
	}

	b.mu.Lock()
	defer b.mu.Unlock()
	id := len(b.namedTypes)
	val.id = id
	b.namedTypes = append(b.namedTypes, typ)
	b.nameToIDMap[val.Name] = append(b.nameToIDMap[val.Name], id)
	// TODO: name conflict check
}

func (b *Builder) lookupType(name string) TypeBuilder {
	b.mu.Lock()
	defer b.mu.Unlock()
	ids, ok := b.nameToIDMap[name]
	if !ok {
		b.nameToIDMap[name] = nil
		return nil
	}
	if len(ids) == 0 {
		return nil
	}

	// TODO: name conflict check
	return b.namedTypes[ids[0]]
}


func (b *Builder) ReferenceByName(name string) *TypeRef {
	return &TypeRef{Name: name, rootbuilder: b}
}
func (b *Builder) Reference(typ TypeBuilder) *TypeRef {
	name := typ.GetTypeMetadata().Name
	return &TypeRef{Name: name, rootbuilder: b, _Type: typ}
}

type TypeRef struct {
	Name string
	_Type TypeBuilder

	rootbuilder *Builder
}

func (t *TypeRef) getType() TypeBuilder {
	if t._Type != nil {
		return t._Type
	}
	t._Type = t.rootbuilder.lookupType(t.Name)
	return t._Type
}
func (t *TypeRef) GetTypeMetadata() *TypeMetadata {
	return t.getType().GetTypeMetadata()
}




// Bool builds Type for Bool
func (b *Builder) Bool() *BoolType {
	t := &BoolType{
		BoolBuilder: &BoolBuilder[*BoolType]{
			_Type:    &_Type[*BoolType]{rootbuilder: b, metadata: &TypeMetadata{Name: "", underlying: "boolean"}},
			metadata: &BoolMetadata{
				
			},
			
		},
	}
	t.ret = t
	return t
}

type BoolType struct {
	*BoolBuilder[*BoolType]
}

func (t *BoolType) GetMetadata() *BoolMetadata {
	return t.metadata
}

type BoolBuilder[R TypeBuilder] struct {
	*_Type[R]
	metadata *BoolMetadata
}




// Int builds Type for Int
func (b *Builder) Int() *IntType {
	t := &IntType{
		IntBuilder: &IntBuilder[*IntType]{
			_Type:    &_Type[*IntType]{rootbuilder: b, metadata: &TypeMetadata{Name: "", underlying: "intger"}},
			metadata: &IntMetadata{
				
			},
			
		},
	}
	t.ret = t
	return t
}

type IntType struct {
	*IntBuilder[*IntType]
}

func (t *IntType) GetMetadata() *IntMetadata {
	return t.metadata
}

type IntBuilder[R TypeBuilder] struct {
	*_Type[R]
	metadata *IntMetadata
}


// begin setter of Int --------------------

// Maximum set Metadata.Maximum
func (b *IntBuilder[R]) Maximum(value int64) R {
	b.metadata.Maximum = value
	return b.ret
}

// Minimum set Metadata.Minimum
func (b *IntBuilder[R]) Minimum(value int64) R {
	b.metadata.Minimum = value
	return b.ret
}

// end setter of Int --------------------



// String builds Type for String
func (b *Builder) String() *StringType {
	t := &StringType{
		StringBuilder: &StringBuilder[*StringType]{
			_Type:    &_Type[*StringType]{rootbuilder: b, metadata: &TypeMetadata{Name: "", underlying: "string"}},
			metadata: &StringMetadata{
				
			},
			
		},
	}
	t.ret = t
	return t
}

type StringType struct {
	*StringBuilder[*StringType]
}

func (t *StringType) GetMetadata() *StringMetadata {
	return t.metadata
}

type StringBuilder[R TypeBuilder] struct {
	*_Type[R]
	metadata *StringMetadata
}


// begin setter of String --------------------

// Pattern set Metadata.Pattern
func (b *StringBuilder[R]) Pattern(value string) R {
	b.metadata.Pattern = value
	return b.ret
}

// MaxLength set Metadata.MaxLength
func (b *StringBuilder[R]) MaxLength(value int64) R {
	b.metadata.MaxLength = value
	return b.ret
}

// MinLength set Metadata.MinLength
func (b *StringBuilder[R]) MinLength(value int64) R {
	b.metadata.MinLength = value
	return b.ret
}

// end setter of String --------------------



// Array builds Type for Array
func (b *Builder) Array(items TypeBuilder, ) *ArrayType[TypeBuilder, ] {
	t := &ArrayType[TypeBuilder, ]{
		ArrayBuilder: &ArrayBuilder[TypeBuilder, *ArrayType[TypeBuilder, ]]{
			_Type:    &_Type[*ArrayType[TypeBuilder, ]]{rootbuilder: b, metadata: &TypeMetadata{Name: "", underlying: "array"}},
			metadata: &ArrayMetadata{
				
			},
			items: items, 
		},
	}
	t.ret = t
	return t
}

type ArrayType[Items TypeBuilder, ] struct {
	*ArrayBuilder[Items, *ArrayType[Items, ]]
}

func (t *ArrayType[Items, ]) GetMetadata() *ArrayMetadata {
	return t.metadata
}

type ArrayBuilder[Items TypeBuilder, R TypeBuilder] struct {
	*_Type[R]
	metadata *ArrayMetadata
	items Items

}


// begin setter of Array --------------------

// MaxItems set Metadata.MaxItems
func (b *ArrayBuilder[Items, R]) MaxItems(value int64) R {
	b.metadata.MaxItems = value
	return b.ret
}

// MinItems set Metadata.MinItems
func (b *ArrayBuilder[Items, R]) MinItems(value int64) R {
	b.metadata.MinItems = value
	return b.ret
}

// end setter of Array --------------------



// Map builds Type for Map
func (b *Builder) Map(items TypeBuilder, ) *MapType[TypeBuilder, ] {
	t := &MapType[TypeBuilder, ]{
		MapBuilder: &MapBuilder[TypeBuilder, *MapType[TypeBuilder, ]]{
			_Type:    &_Type[*MapType[TypeBuilder, ]]{rootbuilder: b, metadata: &TypeMetadata{Name: "", underlying: "map"}},
			metadata: &MapMetadata{
				
			},
			items: items, 
		},
	}
	t.ret = t
	return t
}

type MapType[Items TypeBuilder, ] struct {
	*MapBuilder[Items, *MapType[Items, ]]
}

func (t *MapType[Items, ]) GetMetadata() *MapMetadata {
	return t.metadata
}

type MapBuilder[Items TypeBuilder, R TypeBuilder] struct {
	*_Type[R]
	metadata *MapMetadata
	items Items

}


// begin setter of Map --------------------

// Pattern set Metadata.Pattern
func (b *MapBuilder[Items, R]) Pattern(value string) R {
	b.metadata.Pattern = value
	return b.ret
}

// end setter of Map --------------------



// Field builds Type for Field
func (b *Builder) Field(name string,typ TypeBuilder,) *FieldType {
	t := &FieldType{
		FieldBuilder: &FieldBuilder[*FieldType]{
			_Type:    &_Type[*FieldType]{rootbuilder: b, metadata: &TypeMetadata{Name: "", underlying: "field"}},
			metadata: &FieldMetadata{
				Name: name, Typ: typ, 
			},
			
		},
	}
	t.ret = t
	return t
}

type FieldType struct {
	*FieldBuilder[*FieldType]
}

func (t *FieldType) GetMetadata() *FieldMetadata {
	return t.metadata
}

type FieldBuilder[R TypeBuilder] struct {
	*_Type[R]
	metadata *FieldMetadata
}


// begin setter of Field --------------------

// Description set Metadata.Description
func (b *FieldBuilder[R]) Description(value string) R {
	b.metadata.Description = value
	return b.ret
}

// Required set Metadata.Required
func (b *FieldBuilder[R]) Required(value bool) R {
	b.metadata.Required = value
	return b.ret
}

// end setter of Field --------------------



// Object builds Type for Object
func (b *Builder) Object(fields ...*FieldType,) *ObjectType {
	t := &ObjectType{
		ObjectBuilder: &ObjectBuilder[*ObjectType]{
			_Type:    &_Type[*ObjectType]{rootbuilder: b, metadata: &TypeMetadata{Name: "", underlying: "object"}},
			metadata: &ObjectMetadata{
				Fields: fields, 
			},
			
		},
	}
	t.ret = t
	return t
}

type ObjectType struct {
	*ObjectBuilder[*ObjectType]
}

func (t *ObjectType) GetMetadata() *ObjectMetadata {
	return t.metadata
}

type ObjectBuilder[R TypeBuilder] struct {
	*_Type[R]
	metadata *ObjectMetadata
}


// begin setter of Object --------------------

// Strict set Metadata.Strict
func (b *ObjectBuilder[R]) Strict(value bool) R {
	b.metadata.Strict = value
	return b.ret
}

// end setter of Object --------------------

// internal Type

type _Type[R TypeBuilder] struct {
	metadata *TypeMetadata
	ret      R

	rootbuilder *Builder
}

func (t *_Type[R]) GetTypeMetadata() *TypeMetadata {
	return t.metadata
}
func (t *_Type[R]) Doc(stmts ...string) R {
	t.metadata.Doc = strings.Join(stmts, "\n")
	return t.ret
}


// begin setter of Type --------------------

// Format set Metadata.Format
func (t _Type[R]) Format(value string) R {
	t.metadata.Format = value
	return t.ret
}

// end setter of Type --------------------
func (t *_Type[R]) storeType(name string) {
	t.metadata.Name = name
	t.rootbuilder.storeType(t.ret)
}
